// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? instruction[3]
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	
			
	//if ALU output to be saved in A, choose ALU output
	Mux16(a=instruction,b=outALU,sel=instruction[5],out=outMux1); // should be isntr from prev clock
	
	// a instr if 0
	Not(in=instruction[15],out=Ainstruction);
	
	// if a instr or save form prev clock

	Or(a=instruction[5],b=Ainstruction,out=saveInA);
	And(a=instruction[5],b=instruction[15],out=uploadALUinA);
	//updat reg if true
	Mux16(a=instruction,b=outALU,sel=uploadALUinA,out[0..14]=inputA);
	ARegister(in[0..14]=inputA,load=saveInA,out=regA,out[0..14]=addressM);
	
	// if A - chose inM and output M
	// Mux A or M	
	Mux16(a=regA,b=inM,sel=instruction[12],out=Y);
	// ALU
	ALU(x=regD,y=Y,zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7],no=instruction[6],out=outALU,out=outM,zr=zrALU,ng=ngALU);
	// Save in D or not
	And(a=instruction[4],b=instruction[15],out=loadInD);
	DRegister(in=outALU,load=loadInD,out=regD);
	
	
	
	//Bit(in=instruction[5],load=true,out=instrT0);
	
	//write to M?
	
	Not(in=Ainstruction,out=Dinstruction);
	And(a=instruction[3],b=Dinstruction,out=writeM);
	
	// if jump == true jump at regA
	
	Or(a=zrALU,b=ngALU,out=NotAb0);
	Not(in=NotAb0,out=Above0);
	And(a=instruction[0],b=Above0,out=outJmp1);
	And(a=instruction[1],b=zrALU,out=outJmp2);
	And(a=instruction[2],b=ngALU,out=outJmp3);
	
	Or(a=outJmp1,b=outJmp2,out=jmp1or2);
	Or(a=jmp1or2,b=outJmp3,out=jmpOK);
	
	And(a=jmpOK,b=instruction[15],out=goJmp);
	PC(in=regA,load=goJmp,inc=true,reset=reset,out[0..14]=pc); // a register with PC current counter is saved in reg
			
	// pb quand @ puis A=A+?
			
			
			
			

}